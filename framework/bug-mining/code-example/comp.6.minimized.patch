diff --git a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
index 76e28666..29b8807b 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
@@ -44,7 +44,6 @@ public class ArArchiveInputStream extends ArchiveInputStream {
      * The offset where the current entry started. -1 if no entry has been
      * called
      */
-    private long entryOffset = -1;

     public ArArchiveInputStream( final InputStream pInput ) {
         input = pInput;
@@ -59,18 +58,8 @@ public class ArArchiveInputStream extends ArchiveInputStream {
      *             if the entry could not be read
      */
     public ArArchiveEntry getNextArEntry() throws IOException {
-        if (currentEntry != null) {
-            final long entryEnd = entryOffset + currentEntry.getLength();
-            while (offset < entryEnd) {
-                int x = read();
-                if (x == -1) {
                     // hit EOF before previous entry was complete
                     // TODO: throw an exception instead?
-                    return null;
-                }
-            }
-            currentEntry = null;
-        }

         if (offset == 0) {
             final byte[] expected = ArArchiveEntry.HEADER.getBytes();
@@ -125,7 +114,6 @@ public class ArArchiveInputStream extends ArchiveInputStream {
             }
         }

-        entryOffset = offset;
         currentEntry = new ArArchiveEntry(new String(name).trim(),
                                           Long.parseLong(new String(length)
                                                          .trim()));
@@ -155,17 +143,9 @@ public class ArArchiveInputStream extends ArchiveInputStream {
         return read(b, 0, b.length);
     }

     public int read(byte[] b, final int off, final int len) throws IOException {
         int toRead = len;
-        if (currentEntry != null) {
-            final long entryEnd = entryOffset + currentEntry.getLength();
-            if (len > 0 && entryEnd > offset) {
-                toRead = (int) Math.min(len, entryEnd - offset);
-            } else {
-                return -1;
-            }
-        }
         final int ret = this.input.read(b, off, toRead);
         offset += (ret > 0 ? ret : 0);
         return ret;
     }
